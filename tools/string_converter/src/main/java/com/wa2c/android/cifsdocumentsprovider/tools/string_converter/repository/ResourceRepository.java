package com.wa2c.android.cifsdocumentsprovider.tools.string_converter.repository;


import com.wa2c.android.cifsdocumentsprovider.tools.string_converter.model.CsvRow;
import com.wa2c.android.cifsdocumentsprovider.tools.string_converter.model.StringItem;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

/**
 * Resource file repository
 */
public class ResourceRepository {

    private final XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());

    /**
     * Replace special characters
     */
    private String replaceText(String input) {
        return input.replaceAll("\\r\\n|\\r|\\n", "\\\\n")
                .replaceAll("\'", "\\\\'")
                .replaceAll("\"", "\\\\\"");
    }

    /**
     * Save resource files
     */
    public void saveMultiLanguage(List<CsvRow> csvList, String resourceDirPath) throws IOException {
        Map<String, List<StringItem>> stringMap = csvList.get(0).getLangText().keySet()
                .stream()
                .collect(java.util.stream.Collectors.toMap(langCode -> langCode, langCode -> new java.util.ArrayList<>()));

        String group = "";
        for (CsvRow row : csvList) {
            if (!row.getResourceId().isEmpty()) {
                group = row.getTitle();
            }

            String finalGroup = group;
            row.getLangText().forEach((langCode, text) -> {
                stringMap.get(langCode).add(
                        new StringItem(
                                finalGroup,
                                row.getResourceId(),
                                text
                        )
                );
            });
        }

        for (Map.Entry<String, List<StringItem>> entry : stringMap.entrySet()) {
            Document document = new Document();
            Element rootElement = new Element("resources").setAttribute("encoding", "utf-8")
                    .setAttribute("version", "1.0");
            document.setRootElement(rootElement);

            rootElement.addContent(new Comment("This file is generated by string converter tool."));
            rootElement.addContent(new Comment("Source: https://docs.google.com/spreadsheets/d/1y71DyM31liwjcAUuPIk3CuIqxJD2l9Y2Q-YZ0I0XE_E/edit#gid=0"));

            String currentGroup = "";
            for (StringItem item : entry.getValue()) {
                if (!currentGroup.equals(item.getGroup())) {
                    currentGroup = item.getGroup();
                    rootElement.addContent(new Comment(currentGroup));
                }
                Element stringElement = new Element("string").setAttribute("name", item.getResourceId())
                        .setText(replaceText(item.getValue()));
                rootElement.addContent(stringElement);
            }

            String suffix = entry.getKey().equals("en") ? "" : "-" + entry.getKey();
            File file = new File(resourceDirPath + "/values" + suffix, "strings.xml");
            if (!file.exists()) {
                file.createNewFile();
            }

            xmlOutputter.output(document, new FileWriter(file));
            System.out.println("Updated: " + file.getCanonicalPath());
        }
    }

    private static class Comment extends Element {
        public Comment(String text) {
            super("comment");
            this.setText(text);
        }
    }

    private static final Charset XML_CHARSET = Charset.forName("UTF-8");
}


